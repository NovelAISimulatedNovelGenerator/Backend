syntax = "proto3";

package background;

option go_package = "novelai/background";

import "google/protobuf/timestamp.proto";

// Worldview 世界观信息
message Worldview {
    int64 id = 1;                               // 世界观ID
    string name = 2;                            // 世界观名称
    string description = 3;                     // 世界观详细描述
    string tag = 4;                             // 标签，多个标签用英文逗号分隔
    int64 parent_id = 5;                        // 父世界观ID，0表示主世界观 (顶级世界观)
    // Note: Representing full children list here can lead to large messages and recursion issues.
    // It's often better to fetch children via a separate ListWorldviewsRequest with parent_id.
    google.protobuf.Timestamp created_at = 6;   // 创建时间
    google.protobuf.Timestamp updated_at = 7;   // 更新时间
}

// Rule 规则信息
message Rule {
    int64 id = 1;                               // 规则ID
    int64 worldview_id = 2;                     // 所属世界观ID
    string name = 3;                            // 规则名称
    string description = 4;                     // 规则详细描述
    string tag = 5;                             // 标签，多个标签用英文逗号分隔
    int64 parent_id = 6;                        // 父规则ID，0表示主规则 (顶级规则)
    google.protobuf.Timestamp created_at = 7;   // 创建时间
    google.protobuf.Timestamp updated_at = 8;   // 更新时间
}

// BackgroundInfo 背景信息 (renamed from Background to avoid potential Go keyword conflicts if generated type is just Background)
message BackgroundInfo {
    int64 id = 1;                               // 背景ID
    int64 worldview_id = 2;                     // 所属世界观ID
    string name = 3;                            // 背景名称
    string description = 4;                     // 背景详细描述
    string tag = 5;                             // 标签，多个标签用英文逗号分隔
    int64 parent_id = 6;                        // 父背景ID，0表示主背景 (顶级背景)
    google.protobuf.Timestamp created_at = 7;   // 创建时间
    google.protobuf.Timestamp updated_at = 8;   // 更新时间
}

// --- Worldview RPC 请求与响应 ---
message CreateWorldviewRequest {
    string name = 1;                            // 世界观名称 (必填)
    string description = 2;                     // 世界观详细描述
    string tag = 3;                             // 标签
    int64 parent_id = 4;                        // 父世界观ID (0 表示创建为顶级世界观)
}
message CreateWorldviewResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    Worldview worldview = 3;                    // 创建成功后的世界观信息
}

message GetWorldviewRequest {
    int64 worldview_id = 1;                     // 要获取的世界观ID
}
message GetWorldviewResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    Worldview worldview = 3;                    // 获取到的世界观信息
}

message UpdateWorldviewRequest {
    int64 id = 1;                               // 要更新的世界观ID (必填)
    string name = 2;                            // 新的世界观名称 (可选，不传则不修改)
    string description = 3;                     // 新的世界观详细描述 (可选)
    string tag = 4;                             // 新的标签 (可选)
    int64 parent_id = 5;                        // 新的父世界观ID (可选)
}
message UpdateWorldviewResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
}

message DeleteWorldviewRequest {
    int64 worldview_id = 1;                     // 要删除的世界观ID
}
message DeleteWorldviewResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
}

message ListWorldviewsRequest {
    int64 parent_id_filter = 1;                 // 父世界观ID筛选 (0表示顶级, -1或不传表示不筛选parent_id)
    string tag_filter = 2;                      // 标签筛选 (部分匹配或完全匹配，具体逻辑由服务端定)
    int32 page = 3;                             // 页码，从1开始
    int32 page_size = 4;                        // 每页数量
}
message ListWorldviewsResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    repeated Worldview worldviews = 3;           // 世界观列表
    int32 total_count = 4;                      // 总数量 (用于分页)
}

// --- Rule RPC 请求与响应 ---
message CreateRuleRequest {
    int64 worldview_id = 1;                     // 所属世界观ID (必填)
    string name = 2;                            // 规则名称 (必填)
    string description = 3;                     // 规则详细描述
    string tag = 4;                             // 标签
    int64 parent_id = 5;                        // 父规则ID (0 表示创建为顶级规则)
}
message CreateRuleResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    Rule rule = 3;                              // 创建成功后的规则信息
}

message GetRuleRequest {
    int64 rule_id = 1;                          // 要获取的规则ID
}
message GetRuleResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    Rule rule = 3;                              // 获取到的规则信息
}

message UpdateRuleRequest {
    int64 id = 1;                               // 要更新的规则ID (必填)
    int64 worldview_id = 2;                     // 新的所属世界观ID (可选)
    string name = 3;                            // 新的规则名称 (可选)
    string description = 4;                     // 新的规则详细描述 (可选)
    string tag = 5;                             // 新的标签 (可选)
    int64 parent_id = 6;                        // 新的父规则ID (可选)
}
message UpdateRuleResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
}

message DeleteRuleRequest {
    int64 rule_id = 1;                          // 要删除的规则ID
}
message DeleteRuleResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
}

message ListRulesRequest {
    int64 worldview_id_filter = 1;              // 所属世界观ID筛选 (可选, 0或不传表示不筛选)
    int64 parent_id_filter = 2;                 // 父规则ID筛选 (可选, 0表示顶级, -1或不传表示不筛选parent_id)
    string tag_filter = 3;                      // 标签筛选
    int32 page = 4;                             // 页码，从1开始
    int32 page_size = 5;                        // 每页数量
}
message ListRulesResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    repeated Rule rules = 3;                    // 规则列表
    int32 total_count = 4;                      // 总数量
}

// --- BackgroundInfo RPC 请求与响应 ---
message CreateBackgroundInfoRequest {
    int64 worldview_id = 1;                     // 所属世界观ID (必填)
    string name = 2;                            // 背景名称 (必填)
    string description = 3;                     // 背景详细描述
    string tag = 4;                             // 标签
    int64 parent_id = 5;                        // 父背景ID (0 表示创建为顶级背景)
}
message CreateBackgroundInfoResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    BackgroundInfo background_info = 3;         // 创建成功后的背景信息
}

message GetBackgroundInfoRequest {
    int64 background_id = 1;                    // 要获取的背景ID
}
message GetBackgroundInfoResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    BackgroundInfo background_info = 3;         // 获取到的背景信息
}

message UpdateBackgroundInfoRequest {
    int64 id = 1;                               // 要更新的背景ID (必填)
    int64 worldview_id = 2;                     // 新的所属世界观ID (可选)
    string name = 3;                            // 新的背景名称 (可选)
    string description = 4;                     // 新的背景详细描述 (可选)
    string tag = 5;                             // 新的标签 (可选)
    int64 parent_id = 6;                        // 新的父背景ID (可选)
}
message UpdateBackgroundInfoResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
}

message DeleteBackgroundInfoRequest {
    int64 background_id = 1;                    // 要删除的背景ID
}
message DeleteBackgroundInfoResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
}

message ListBackgroundInfosRequest {
    int64 worldview_id_filter = 1;              // 所属世界观ID筛选 (可选)
    int64 parent_id_filter = 2;                 // 父背景ID筛选 (可选, 0表示顶级, -1或不传表示不筛选parent_id)
    string tag_filter = 3;                      // 标签筛选
    int32 page = 4;                             // 页码，从1开始
    int32 page_size = 5;                        // 每页数量
}
message ListBackgroundInfosResponse {
    int32 code = 1;                             // 状态码：0-成功，非0-失败
    string message = 2;                         // 响应消息
    repeated BackgroundInfo background_infos = 3; // 背景列表
    int32 total_count = 4;                      // 总数量
}

// BackgroundService 服务定义
service BackgroundService {
    // Worldview RPCs
    rpc CreateWorldview(CreateWorldviewRequest) returns (CreateWorldviewResponse) {}
    rpc GetWorldview(GetWorldviewRequest) returns (GetWorldviewResponse) {}
    rpc UpdateWorldview(UpdateWorldviewRequest) returns (UpdateWorldviewResponse) {}
    rpc DeleteWorldview(DeleteWorldviewRequest) returns (DeleteWorldviewResponse) {}
    rpc ListWorldviews(ListWorldviewsRequest) returns (ListWorldviewsResponse) {}

    // Rule RPCs
    rpc CreateRule(CreateRuleRequest) returns (CreateRuleResponse) {}
    rpc GetRule(GetRuleRequest) returns (GetRuleResponse) {}
    rpc UpdateRule(UpdateRuleRequest) returns (UpdateRuleResponse) {}
    rpc DeleteRule(DeleteRuleRequest) returns (DeleteRuleResponse) {}
    rpc ListRules(ListRulesRequest) returns (ListRulesResponse) {}

    // BackgroundInfo RPCs
    rpc CreateBackgroundInfo(CreateBackgroundInfoRequest) returns (CreateBackgroundInfoResponse) {}
    rpc GetBackgroundInfo(GetBackgroundInfoRequest) returns (GetBackgroundInfoResponse) {}
    rpc UpdateBackgroundInfo(UpdateBackgroundInfoRequest) returns (UpdateBackgroundInfoResponse) {}
    rpc DeleteBackgroundInfo(DeleteBackgroundInfoRequest) returns (DeleteBackgroundInfoResponse) {}
    rpc ListBackgroundInfos(ListBackgroundInfosRequest) returns (ListBackgroundInfosResponse) {}
}
